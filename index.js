const {
  Client,
  GatewayIntentBits,
  Collection,
  Partials,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionFlagsBits,
  ApplicationCommandType,
  ModalBuilder, // Import ModalBuilder
  TextInputBuilder, // Import TextInputBuilder
  TextInputStyle // Import TextInputStyle
} = require("discord.js");
console.clear();
const configJson = require('./config.json');
const { perms, Emojis } = require("./databases/index"); // Ajuste o caminho se necess√°rio
const axios = require("axios");
const fs = require('node:fs');
const path = require('node:path');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildPresences,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildMessageTyping,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.DirectMessageReactions,
    GatewayIntentBits.DirectMessageTyping
  ],
  partials: [
    Partials.Message,
    Partials.Channel,
    Partials.Reaction,
    Partials.User
  ]
});

module.exports = client;

client.slashCommands = new Collection();

const { token } = require("./config.json");

// --- Configura√ß√£o Centralizada do Sistema de Tickets ---
const config = {
  panelChannelId: "PAINEL CANAL ID", // << Mude pelo id do canal do painel de controle
  ticketCategory: "ID CATEGORIA", // << SUBSTITUA PELO ID DA SUA CATEGORIA
  adminRoleId: "ID CARGO ADM", // ID do Cargo de Administrador

  embed: {
    author: "Central De Atendimento",
    color: "#2F3136",
    description:
      "**Bem-vindo ao painel de tickets.** Antes de abrir um ticket, leia atentamente as informa√ß√µes abaixo para garantir um atendimento eficiente e evitar puni√ß√µes.\n\n" +
      "**Hor√°rio de Atendimento**\n" +
      "Nosso suporte est√° dispon√≠vel nos seguintes hor√°rios:\n" +
      "‚Ä¢ Segunda a sexta-feira: 8h √†s 21h\n" +
      "‚Ä¢ Exceto finais de semana e feriados\n\n" +
      "**Uso de Tickets**\n" +
      "Os tickets devem ser utilizados exclusivamente para assuntos relacionados √† compra ou d√∫vidas sobre nossos bots. Tickets fora desse contexto ser√£o encerrados sem resposta.",
  },
  messages: {
    noPermission: `${Emojis.get("negative")} Voc√™ n√£o tem permiss√£o para isso.`,
    panelSent: `${Emojis.get("checker")} Painel Gerado com sucesso!`,
    pleaseWait: `${Emojis.get("loading")} Aguarde um Momento...`,
    alreadyOpen: (channel) =>
      `${Emojis.get("negative")} Voc√™ j√° possui um atendimento aberto: ${channel}`,
    ticketCreated: (channel) =>
      `${Emojis.get("checker")} Canal criado com sucesso: ${channel}`,
    welcomeMessage: (user) => `Ol√° ${user}, em que posso te ajudar?`,
    ticketClosed: `${Emojis.get("checker")} Atendimento encerrado. Canal ser√° deletado em 5 segundos.`,
    adminOnlyClose: `${Emojis.get("negative")} Apenas administradores podem encerrar atendimentos.`,
    ticketRenamed: (newName) => `${Emojis.get("checker")} O ticket foi renomeado para **${newName}**.`,
    notifyUserDM: (channelURL) => `Ol√°! Viemos te notificar que h√° uma atualiza√ß√£o em seu ticket. Por favor, acesse-o para verificar: ${channelURL}`,
    notifySuccess: `${Emojis.get("checker")} O usu√°rio foi notificado com sucesso na DM.`,
    notifyFailDM: `${Emojis.get("negative")} N√£o foi poss√≠vel enviar a notifica√ß√£o para a DM do usu√°rio.`,
    noUserInTicket: `${Emojis.get("negative")} N√£o foi poss√≠vel identificar o usu√°rio principal deste ticket.`,
  },
  ticketCloseDelay: 5000,
};

// --- Evento de Pronto (Bot Ligado) ---
client.on("ready", async () => {
  console.log(`‚úÖ O bot ${client.user.tag} est√° online!`);

  // --- Enviar Painel de Atendimento Automaticamente ---
  try {
    const channel = await client.channels.fetch(config.panelChannelId);
    if (!channel) {
      console.error(`‚ùå Canal com ID ${config.panelChannelId} n√£o encontrado.`);
      return;
    }
    if (channel.type !== ChannelType.GuildText) {
        console.error(`‚ùå O canal ${config.panelChannelId} n√£o √© um canal de texto.`);
        return;
    }

    const embed = new EmbedBuilder()
      .setAuthor({ name: config.embed.author })
      .setDescription(config.embed.description)
      .setColor(config.embed.color);

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("abrir_ticket")
        .setLabel("Iniciar Atendimento")
        .setStyle(ButtonStyle.Secondary)
    );

    // Fetch existing messages in the channel to avoid sending duplicate panels
    const messages = await channel.messages.fetch({ limit: 10 });
    const existingPanel = messages.find(m =>
      m.embeds.length > 0 &&
      m.embeds[0].author &&
      m.embeds[0].author.name === config.embed.author &&
      m.components.some(comp =>
        comp.components.some(btn => btn.customId === "abrir_ticket")
      )
    );

    if (!existingPanel) {
      await channel.send({ embeds: [embed], components: [row] });
      console.log(`üì© Painel de atendimento enviado automaticamente para ${channel.name}.`);
    } else {
      console.log(`‚úÖ Painel de atendimento j√° existe em ${channel.name}. N√£o foi necess√°rio enviar novamente.`);
    }

  } catch (error) {
    console.error(`‚ùå Erro ao enviar o painel de atendimento autom√°tico:`, error);
  }
});

// --- Carregamento de Outros Eventos e Comandos (se voc√™ tiver handlers) ---
const evento = require("./handler/Events");
evento.run(client);

require("./handler/index")(client);

// --- Listeners de Erro do Processo ---
process.on('unhandledRejection', (reason, promise) => {
  console.log(`üö´ Erro Detectado (unhandledRejection):\n`, reason, promise);
});

process.on('uncaughtException', (error) => {
  console.log(`üö´ Erro Detectado (uncaughtException):\n`, error);
});

// --- Atualiza√ß√£o da Descri√ß√£o da Aplica√ß√£o ---
const url = 'https://discord.com/api/v10/applications/@me';
const data = {
  description: `<:viptraco:1329244462110609519> | <:bot:1376297705118371962> Bot Manager
<:viptraco:1329244462110609519> | <:est_foguete:1373707438615953418> Tecnologia **Sky Apps**
<:viptraco:1329244462110609519> | <:b_link:1284945382849118259>  **Sky Apps**: https://discord.gg/ykwQ8kSVdr`,
};

axios.patch(url, data, {
  headers: {
    Authorization: `Bot ${token}`,
    'Content-Type': 'application/json'
  }
}).catch((error) => {
  console.error(`‚ùå Erro ao atualizar descri√ß√£o da aplica√ß√£o: ${error}`);
});

// --- Listener de Intera√ß√µes (Bot√µes 'termos', 'faq', 'abrir_ticket', 'fechar_ticket', 'notificar_usuario', 'renomear_ticket') ---
client.on("interactionCreate", async (interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === "termos") {
      await interaction.reply({
        content: `# Utiliza√ß√£o dos servi√ßos
1. Todas as transa√ß√µes efetuadas est√£o restritas a produtos virtuais, excluindo-se produtos f√≠sicos ou entregas domiciliares.
2. Ao utilizar nossos Servi√ßos, voc√™ automaticamente concorda com nossos Termos. O n√£o cumprimento destes pode resultar em restri√ß√£o de uso.
# Seus direitos ao utilizar os Servi√ßos da Sky Apps
3. Voc√™ tem o direito de utilizar nossos Servi√ßos conforme suas funcionalidades, desde que n√£o seja para atividades il√≠citas como furtos ou roubos.
# Pol√≠tica de reembolso
4. Todas as transa√ß√µes s√£o volunt√°rias.
5. O reembolso s√≥ √© poss√≠vel mediante solicita√ß√£o √† equipe da Sky Apps. N√£o ser√° concedido em casos de viola√ß√£o dos termos ou pol√≠ticas de uso, incluindo atos ilegais ou viola√ß√µes de direitos autorais.
6. N√£o realizamos reembolsos por arrependimento. Recomendamos a visualiza√ß√£o dos previews do bot para esclarecer d√∫vidas.
7. Abrir disputa com a empresa processadora de pagamento resultar√° no cancelamento do direito de reembolso.
# Pol√≠tica de Compra de Bots
8. Comprometemo-nos a manter seu bot online 24 horas por dia at√© o t√©rmino do plano.
9. Dias adicionais ser√£o fornecidos somente se o bot ficar offline por mais de 48 horas. Abra um ticket em nosso suporte antes de solicitar a extens√£o.
10. Em caso de suspens√£o da conta Discord, n√£o garantimos a devolu√ß√£o da aplica√ß√£o. Recomendamos transferir a posse dos bots para uma conta alternativa segura.
11. Erros no ID durante a aquisi√ß√£o ou transfer√™ncia s√£o responsabilidade do usu√°rio.`,
        ephemeral: true
      });
    }

    if (interaction.customId === "faq") {
      await interaction.reply({
        content: `1. **Como posso adquirir um bot?** Para adquirir um bot, explore a variedade dispon√≠vel nos canais espec√≠ficos dos bots, como Vendas. Clique no bot√£o no canal espec√≠fico do bot desejado para fazer a compra.

2. **Como recebo meu bot ap√≥s a compra?** Ap√≥s a compra, voc√™ receber√° um tutorial em seu carrinho com todas as informa√ß√µes necess√°rias. Com essas informa√ß√µes, voc√™ poder√° configurar seu bot automaticamente.

3. **Como fa√ßo para renovar minha aplica√ß√£o?** Para renovar sua aplica√ß√£o, simplesmente utilize o comando /renovar no canal comandos. Ap√≥s o pagamento, a quantidade de dias comprada ser√° adicionada √† sua aplica√ß√£o, estendendo sua validade.

4.** Meu bot fica online 24 horas por dia?** Sim, seu bot permanecer√° online 24/7. Embora imprevistos possam ocorrer, caso seu bot caia, basta lig√°-lo com o comando /apps em comandos. Se persistir o problema, contate nosso suporte.

5. **Como saber quando meu bot vai expirar?** Voc√™ pode verificar a data de expira√ß√£o via /apps ou aguardar a mensagem de expira√ß√£o enviada pelo nosso manager em sua mensagem privada (enviada 3 dias antes do vencimento).

6. **Como setar permiss√£o no bot de vendas?** Ap√≥s adicionar o seu bot em algum servidor, utilize o seguinte comando /permadd e mencione o seu perfil.`,
        ephemeral: true
      });
    }

    // --- L√≥gica para o bot√£o 'abrir_ticket' (Sistema de Tickets) ---
    if (interaction.customId === "abrir_ticket") {
      await interaction.reply({
        content: config.messages.pleaseWait,
        ephemeral: true,
      });

      const user = interaction.user;
      const guild = interaction.guild;

      const sanitizedUsername = user.username.toLowerCase().replace(/[^a-z0-9-]/g, '');
      const channelName = `üìû„Éª${sanitizedUsername}`;

      const existingChannel = guild.channels.cache.find(
        (c) => c.name === channelName && c.parentId === config.ticketCategory
      );

      if (existingChannel) {
        return interaction.editReply({
          content: config.messages.alreadyOpen(existingChannel),
          ephemeral: true,
        });
      }

      try {
        const ticketChannel = await guild.channels.create({
          name: channelName,
          type: ChannelType.GuildText,
          parent: config.ticketCategory,
          permissionOverwrites: [
            { id: guild.roles.everyone, deny: [PermissionFlagsBits.ViewChannel] },
            { id: user.id, allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
            {
              id: config.adminRoleId,
              allow: [
                PermissionFlagsBits.ViewChannel,
                PermissionFlagsBits.SendMessages,
                PermissionFlagsBits.ManageChannels,
              ],
            },
            { id: client.user.id, allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ManageChannels] },
          ],
        });

        const closeRow = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId("notificar_usuario")
            .setLabel("Notificar User")
            .setStyle(2)
            .setEmoji("<:notifications_active_24dp_E3E3E3:1384934820299411497>"),
         new ButtonBuilder()
            .setCustomId("renomear_ticket")
            .setLabel("Renomear")
            .setStyle(2)
            .setEmoji("<:edit_24dp_E3E3E3_FILL0_wght400_G:1384934817308872785>"),
          new ButtonBuilder()
            .setCustomId("fechar_ticket")
            .setLabel("Encerrar")
            .setStyle(ButtonStyle.Danger)
            .setEmoji("<:delete_24dp_E3E3E3_FILL0_wght400:1384020979591806986>")

        );

        await ticketChannel.send({ content: `${config.messages.welcomeMessage(user)} <@&${config.adminRoleId}>`, components: [closeRow] });

        // --- NOVIDADE AQUI: Bot√£o de redirecionamento para o canal do ticket ---
        const goToTicketButton = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setLabel("Ir para o Ticket")
            .setStyle(ButtonStyle.Link) // Estilo Link para redirecionar para uma URL
            .setURL(ticketChannel.url) // A URL do canal do ticket
        );

        // A mensagem de resposta agora inclui o bot√£o de redirecionamento
        await interaction.editReply({
            content: config.messages.ticketCreated(ticketChannel),
            components: [goToTicketButton], // Adiciona a ActionRow com o bot√£o
            ephemeral: true
        });

      } catch (error) {
        console.error("Erro ao criar o canal do ticket:", error);
        await interaction.editReply({
          content: `${Emojis.get("negative")} Ocorreu um erro ao criar o canal de atendimento. Por favor, tente novamente mais tarde.`,
          ephemeral: true,
        });
      }
    }

    // --- L√≥gica para o bot√£o 'fechar_ticket' (Sistema de Tickets) ---
    if (interaction.customId === "fechar_ticket") {
      const member = interaction.member;
      if (!member || !member.roles.cache.has(config.adminRoleId)) {
        return interaction.reply({
          content: config.messages.adminOnlyClose,
          ephemeral: true,
        });
      }

      const channelToClose = interaction.channel;
      await interaction.reply({ content: config.messages.ticketClosed, ephemeral: true });

      setTimeout(async () => {
        try {
          await channelToClose.delete();
        } catch (error) {
          console.error(`Erro ao deletar o canal do ticket ${channelToClose.name}:`, error);
        }
      }, config.ticketCloseDelay);
    }

    // --- L√≥gica para o bot√£o 'notificar_usuario' (Novo) ---
    if (interaction.customId === "notificar_usuario") {
      const member = interaction.member;
      if (!member || !member.roles.cache.has(config.adminRoleId)) {
        return interaction.reply({
          content: config.messages.noPermission,
          ephemeral: true,
        });
      }

      const ticketChannel = interaction.channel;
      // Extract the user ID from the channel permissions, assuming the user is the only non-admin with view access
      const userOverwrite = ticketChannel.permissionOverwrites.cache.find(
        (overwrite) => overwrite.allow.has(PermissionFlagsBits.ViewChannel) && overwrite.id !== interaction.guild.roles.everyone.id && overwrite.id !== config.adminRoleId && overwrite.id !== client.user.id
      );

      if (!userOverwrite) {
        return interaction.reply({
          content: config.messages.noUserInTicket,
          ephemeral: true,
        });
      }

      const ticketOwner = await client.users.fetch(userOverwrite.id).catch(() => null);

      if (!ticketOwner) {
        return interaction.reply({
          content: config.messages.noUserInTicket,
          ephemeral: true,
        });
      }

      try {
        const goToTicketButton = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setLabel("Ir para o Ticket")
            .setStyle(ButtonStyle.Link)
            .setURL(ticketChannel.url)
        );
        await ticketOwner.send({ content: config.messages.notifyUserDM(ticketChannel.url), components: [goToTicketButton] });
        await interaction.reply({ content: config.messages.notifySuccess, ephemeral: true });
      } catch (error) {
        console.error(`Erro ao notificar o usu√°rio ${ticketOwner.tag}:`, error);
        await interaction.reply({ content: config.messages.notifyFailDM, ephemeral: true });
      }
    }

    // --- L√≥gica para o bot√£o 'renomear_ticket' (Novo) ---
    if (interaction.customId === "renomear_ticket") {
      const member = interaction.member;
      if (!member || !member.roles.cache.has(config.adminRoleId)) {
        return interaction.reply({
          content: config.messages.noPermission,
          ephemeral: true,
        });
      }

      const modal = new ModalBuilder()
        .setCustomId("rename_ticket_modal")
        .setTitle("Renomear Ticket");

      const newNameInput = new TextInputBuilder()
        .setCustomId("new_ticket_name")
        .setLabel("Novo nome para o ticket")
        .setStyle(TextInputStyle.Short)
        .setPlaceholder("Ex: duvida-sobre-bot")
        .setRequired(true);

      const firstActionRow = new ActionRowBuilder().addComponents(newNameInput);

      modal.addComponents(firstActionRow);

      await interaction.showModal(modal);
    }
  }

  // --- L√≥gica para o envio do formul√°rio de renomear ticket (Novo) ---
  if (interaction.isModalSubmit()) {
    if (interaction.customId === "rename_ticket_modal") {
      const member = interaction.member;
      if (!member || !member.roles.cache.has(config.adminRoleId)) {
        return interaction.reply({
          content: config.messages.noPermission,
          ephemeral: true,
        });
      }

      const newName = interaction.fields.getTextInputValue("new_ticket_name");
      const currentChannel = interaction.channel;

      try {
        await currentChannel.setName(newName);
        await interaction.reply({ content: config.messages.ticketRenamed(newName), ephemeral: true });
      } catch (error) {
        console.error(`Erro ao renomear o canal ${currentChannel.name}:`, error);
        await interaction.reply({ content: `${Emojis.get("negative")} Ocorreu um erro ao renomear o ticket.`, ephemeral: true });
      }
    }
  }
});

client.login(token);