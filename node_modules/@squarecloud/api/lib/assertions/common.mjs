// src/structures/application/base.ts
import FormData2 from "form-data";

// src/assertions/literal.ts
import * as z from "zod";
var StringSchema = z.coerce.string();
var BooleanSchema = z.coerce.boolean();
var PathLikeSchema = z.string().or(z.instanceof(Buffer));

// src/modules/applications.ts
import FormData from "form-data";

// src/structures/error.ts
var SquareCloudAPIError = class extends TypeError {
  constructor(code, message, options) {
    super(code);
    this.name = "SquareCloudAPIError";
    this.message = (code?.replaceAll("_", " ").toLowerCase().replace(/(^|\s)\S/g, (L) => L.toUpperCase()) || "UNKNOWN_CODE") + (message ? `: ${message}` : "");
    if (options?.stack) {
      this.stack = options.stack;
    }
    if (options?.cause) {
      this.cause = options.cause;
    }
  }
};

// src/assertions/common.ts
function assertLiteral({
  schema,
  value,
  expect,
  code
}) {
  try {
    schema.parse(value);
  } catch {
    throw new SquareCloudAPIError(
      code ? `INVALID_${code}` : "VALIDATION_ERROR",
      `Expect ${expect}, got ${typeof value}`
    );
  }
}
export {
  assertLiteral
};
//# sourceMappingURL=common.mjs.map