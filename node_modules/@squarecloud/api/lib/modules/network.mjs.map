{"version":3,"sources":["../../src/assertions/literal.ts","../../src/structures/application/base.ts","../../src/lib/routes.ts","../../src/modules/applications.ts","../../src/structures/error.ts","../../src/assertions/common.ts","../../src/modules/network.ts"],"sourcesContent":["import * as z from \"zod\";\n\nimport { assertLiteral } from \"./common\";\n\nconst StringSchema = z.coerce.string();\n\nconst BooleanSchema = z.coerce.boolean();\n\nconst PathLikeSchema = z.string().or(z.instanceof(Buffer));\n\nexport function assertString(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is string {\n\tassertLiteral({\n\t\tschema: StringSchema,\n\t\texpect: \"string\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n\nexport function assertBoolean(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is boolean {\n\tassertLiteral({\n\t\tschema: BooleanSchema,\n\t\texpect: \"boolean\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n\nexport function assertPathLike(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is string | Buffer {\n\tassertLiteral({\n\t\tschema: PathLikeSchema,\n\t\texpect: \"string or Buffer\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n","import type {\n\tAPIUserApplication,\n\tApplicationLanguage,\n} from \"@squarecloud/api-types/v2\";\nimport FormData from \"form-data\";\nimport { readFile } from \"fs/promises\";\n\nimport { assertPathLike, assertString } from \"@/assertions/literal\";\nimport type { SquareCloudAPI } from \"@/index\";\nimport { Routes } from \"@/lib/routes\";\nimport { BackupsModule, DeploysModule, FilesModule } from \"@/modules\";\nimport { ApplicationCacheService } from \"@/services\";\nimport { ApplicationStatus } from \"@/structures\";\nimport type { Application } from \"./application\";\n\n/**\n * Represents the base application from the user endpoint\n */\nexport class BaseApplication {\n\t/** The application ID */\n\tpublic readonly id: string;\n\t/** The application display name */\n\tpublic name: string;\n\t/** The application description */\n\tpublic description?: string;\n\t/** The url to manage the application via web */\n\tpublic url: string;\n\t/** The application total ram */\n\tpublic ram: number;\n\t/** The application current cluster */\n\tpublic cluster: string;\n\t/**\n\t * The application programming language\n\t *\n\t * - `javascript`\n\t * - `typescript`\n\t * - `python`\n\t * - `java`\n\t * - `elixir`\n\t * - `rust`\n\t * - `go`\n\t * - `php`\n\t * - `dotnet`\n\t * - `static`\n\t */\n\tpublic language: ApplicationLanguage;\n\n\t/** Cache service for this application */\n\tpublic readonly cache = new ApplicationCacheService();\n\t/** Files module for this application */\n\tpublic readonly files = new FilesModule(this);\n\t/** Backup module for this application */\n\tpublic readonly backups = new BackupsModule(this);\n\t/** Deploys module for this application */\n\tpublic readonly deploys = new DeploysModule(this);\n\n\t/**\n\t * Represents the base application from the user endpoint\n\t *\n\t * @constructor\n\t * @param client - The client for this application\n\t * @param data - The data from this application\n\t */\n\tconstructor(\n\t\tpublic readonly client: SquareCloudAPI,\n\t\tdata: APIUserApplication,\n\t) {\n\t\tconst { id, name, desc, ram, lang, cluster } = data;\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.description = desc;\n\t\tthis.ram = ram;\n\t\tthis.language = lang;\n\t\tthis.cluster = cluster;\n\t\tthis.url = `https://squarecloud.app/dashboard/app/${id}`;\n\t}\n\n\t/** @deprecated Use `Application#backups` instead */\n\tget backup() {\n\t\tconsole.warn(\n\t\t\t\"Application#backup is deprecated. Use Application#backups instead.\",\n\t\t);\n\t\treturn this.backups;\n\t}\n\n\t/**\n\t * Fetches this application for full information\n\t */\n\tasync fetch(): Promise<Application> {\n\t\treturn this.client.applications.fetch(this.id);\n\t}\n\n\t/**\n\t * Gets the application current status information\n\t */\n\tasync getStatus(): Promise<ApplicationStatus> {\n\t\tconst data = await this.client.api.request(Routes.apps.status(this.id));\n\t\tconst status = new ApplicationStatus(this.client, data.response, this.id);\n\n\t\tthis.client.emit(\"statusUpdate\", this, this.cache.status, status);\n\t\tthis.cache.set(\"status\", status);\n\n\t\treturn status;\n\t}\n\n\t/**\n\t * Gets the application current logs\n\t */\n\tasync getLogs(): Promise<string> {\n\t\tconst data = await this.client.api.request(Routes.apps.logs(this.id));\n\t\tconst { logs } = data.response;\n\n\t\tthis.client.emit(\"logsUpdate\", this, this.cache.logs, logs);\n\t\tthis.cache.set(\"logs\", logs);\n\n\t\treturn logs;\n\t}\n\n\t/**\n\t * Starts up the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync start(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.start(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Stops the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync stop(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.stop(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Restarts the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync restart(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.restart(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Deletes your whole application\n\t * - This action is irreversible.\n\t *\n\t * @returns `boolean` for success or fail\n\t */\n\tasync delete(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.delete(this.id), {\n\t\t\tmethod: \"DELETE\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Commit files to your application folder\n\t *\n\t * - This action is irreversible.\n\t *\n\t * - Tip: use this to get an absolute path.\n\t * ```ts\n\t * require('path').join(__dirname, 'fileName')\n\t * ```\n\t * - Tip 2: use a zip file to commit more than one archive\n\t *\n\t * @param file - Buffer or absolute path to the file\n\t * @param fileName - The file name (e.g.: \"index.js\")\n\t * @param restart - Whether the application should be restarted after the commit\n\t * @returns `true` for success or `false` for fail\n\t */\n\tasync commit(file: string | Buffer, fileName?: string): Promise<boolean> {\n\t\tassertPathLike(file, \"COMMIT_DATA\");\n\n\t\tif (fileName) {\n\t\t\tassertString(fileName, \"FILE_NAME\");\n\t\t}\n\n\t\tif (typeof file === \"string\") {\n\t\t\tfile = await readFile(file);\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file, { filename: fileName || \"app.zip\" });\n\n\t\tconst data = await this.client.api.request(Routes.apps.commit(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData.getBuffer(),\n\t\t\theaders: formData.getHeaders(),\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n}\n","import type { APIEndpoint } from \"@/types\";\n\nexport type Route<T extends APIEndpoint> = string & { __route: T };\nexport const Route = <T extends APIEndpoint>(route: string) =>\n\troute as Route<T>;\n\ninterface IRoutes {\n\t[k: string]: ((...args: string[]) => Route<APIEndpoint>) | IRoutes;\n}\n\nexport const Routes = {\n\tuser: () => {\n\t\treturn Route<\"user\">(\"/v2/users/me\");\n\t},\n\tservice: {\n\t\tstatus: () => {\n\t\t\treturn Route<\"service/status\">(\"/v2/service/status\");\n\t\t},\n\t},\n\tapps: {\n\t\tupload: () => {\n\t\t\treturn Route<\"apps/upload\">(\"/v2/apps\");\n\t\t},\n\t\tstatusAll: () => {\n\t\t\treturn Route<\"apps/status-all\">(\"/v2/apps/status\");\n\t\t},\n\t\tinfo: (appId: string) => {\n\t\t\treturn Route<\"apps/info\">(`/v2/apps/${appId}`);\n\t\t},\n\t\tstatus: (appId: string) => {\n\t\t\treturn Route<\"apps/status\">(`/v2/apps/${appId}/status`);\n\t\t},\n\t\tlogs: (appId: string) => {\n\t\t\treturn Route<\"apps/logs\">(`/v2/apps/${appId}/logs`);\n\t\t},\n\t\tdelete: (appId: string) => {\n\t\t\treturn Route<\"apps/delete\">(`/v2/apps/${appId}`);\n\t\t},\n\t\tcommit: (appId: string) => {\n\t\t\treturn Route<\"apps/commit\">(`/v2/apps/${appId}/commit`);\n\t\t},\n\t\tbackups: (appId: string) => {\n\t\t\treturn Route<\"apps/backups\">(`/v2/apps/${appId}/backups`);\n\t\t},\n\t\tgenerateBackup: (appId: string) => {\n\t\t\treturn Route<\"apps/generate-backup\">(`/v2/apps/${appId}/backups`);\n\t\t},\n\t\tstart: (appId: string) => {\n\t\t\treturn Route<\"apps/start\">(`/v2/apps/${appId}/start`);\n\t\t},\n\t\trestart: (appId: string) => {\n\t\t\treturn Route<\"apps/restart\">(`/v2/apps/${appId}/restart`);\n\t\t},\n\t\tstop: (appId: string) => {\n\t\t\treturn Route<\"apps/stop\">(`/v2/apps/${appId}/stop`);\n\t\t},\n\t\tfiles: {\n\t\t\tread: (appId: string) => {\n\t\t\t\treturn Route<\"apps/files/read\">(`/v2/apps/${appId}/files/content`);\n\t\t\t},\n\t\t\tlist: (appId: string) => {\n\t\t\t\treturn Route<\"apps/files/list\">(`/v2/apps/${appId}/files`);\n\t\t\t},\n\t\t\tupsert: (appId: string) => {\n\t\t\t\treturn Route<\"apps/files/upsert\">(`/v2/apps/${appId}/files`);\n\t\t\t},\n\t\t\tmove: (appId: string) => {\n\t\t\t\treturn Route<\"apps/files/move\">(`/v2/apps/${appId}/files`);\n\t\t\t},\n\t\t\tdelete: (appId: string) => {\n\t\t\t\treturn Route<\"apps/files/delete\">(`/v2/apps/${appId}/files`);\n\t\t\t},\n\t\t},\n\t\tdeployments: {\n\t\t\tlist: (appId: string) => {\n\t\t\t\treturn Route<\"apps/deployments/list\">(`/v2/apps/${appId}/deployments`);\n\t\t\t},\n\t\t\tcurrent: (appId: string) => {\n\t\t\t\treturn Route<\"apps/deployments/current\">(\n\t\t\t\t\t`/v2/apps/${appId}/deployments/current`,\n\t\t\t\t);\n\t\t\t},\n\t\t\twebhook: (appId: string) => {\n\t\t\t\treturn Route<\"apps/deployments/webhook\">(\n\t\t\t\t\t`/v2/apps/${appId}/deploy/webhook`,\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\tnetwork: {\n\t\t\tdns: (appId: string) => {\n\t\t\t\treturn Route<\"apps/network/dns\">(`/v2/apps/${appId}/network/dns`);\n\t\t\t},\n\t\t\tcustom: (appId: string) => {\n\t\t\t\treturn Route<\"apps/network/custom\">(`/v2/apps/${appId}/network/custom`);\n\t\t\t},\n\t\t\tanalytics: (appId: string) => {\n\t\t\t\treturn Route<\"apps/network/analytics\">(\n\t\t\t\t\t`/v2/apps/${appId}/network/analytics`,\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t},\n} satisfies IRoutes;\n","import type { RESTPostAPIApplicationUploadResult } from \"@squarecloud/api-types/v2\";\nimport FormData from \"form-data\";\nimport { readFile } from \"fs/promises\";\n\nimport { assertPathLike, assertString } from \"@/assertions/literal\";\nimport { Routes } from \"@/lib/routes\";\nimport {\n\tApplication,\n\ttype BaseApplication,\n\ttype Collection,\n\tSimpleApplicationStatus,\n\tSquareCloudAPIError,\n\tUser,\n} from \"@/structures\";\nimport type { SquareCloudAPI } from \"..\";\n\nexport class ApplicationsModule {\n\tconstructor(public readonly client: SquareCloudAPI) {}\n\n\t/**\n\t * If the ID is provided, it will return an application that you can manage or get information\n\t * If the ID is not provided, it will return a collection of applications\n\t *\n\t * @param applicationId - The application ID, you must own the application\n\t */\n\tasync get(): Promise<Collection<string, BaseApplication>>;\n\tasync get(applicationId: string): Promise<BaseApplication>;\n\tasync get(\n\t\tapplicationId?: string,\n\t): Promise<BaseApplication | Collection<string, BaseApplication>> {\n\t\tconst { response } = await this.client.api.request(Routes.user());\n\t\tconst user = new User(this.client, response);\n\n\t\tthis.client.emit(\"userUpdate\", this.client.cache.user, user);\n\t\tthis.client.cache.set(\"user\", user);\n\n\t\tif (applicationId) {\n\t\t\tassertString(applicationId, \"APP_ID\");\n\t\t\tconst application = user.applications.get(applicationId);\n\n\t\t\tif (!application) {\n\t\t\t\tthrow new SquareCloudAPIError(\"APP_NOT_FOUND\");\n\t\t\t}\n\n\t\t\treturn application;\n\t\t}\n\n\t\treturn user.applications;\n\t}\n\n\t/**\n\t * Uploads an application\n\t *\n\t * @param file - The zip file path or Buffer\n\t *\n\t * @returns The uploaded application data\n\t */\n\tasync create(\n\t\tfile: string | Buffer,\n\t): Promise<RESTPostAPIApplicationUploadResult> {\n\t\tassertPathLike(file, \"COMMIT_DATA\");\n\n\t\tif (typeof file === \"string\") {\n\t\t\tfile = await readFile(file);\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file, { filename: \"app.zip\" });\n\n\t\tconst data = await this.client.api.request(Routes.apps.upload(), {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData.getBuffer(),\n\t\t\theaders: formData.getHeaders(),\n\t\t});\n\n\t\treturn data.response;\n\t}\n\n\t/**\n\t * Gets the summary status for all your applications\n\t */\n\tasync statusAll(): Promise<SimpleApplicationStatus[]> {\n\t\tconst data = await this.client.api.request(Routes.apps.statusAll());\n\n\t\treturn data.response.map(\n\t\t\t(status) => new SimpleApplicationStatus(this.client, status),\n\t\t);\n\t}\n\n\t/**\n\t * Returns an application that you can manage or get information\n\t *\n\t * @param applicationId - The application ID, you must own the application\n\t */\n\tasync fetch(applicationId: string): Promise<Application> {\n\t\tconst { response } = await this.client.api.request(\n\t\t\tRoutes.apps.info(applicationId),\n\t\t);\n\n\t\treturn new Application(this.client, response);\n\t}\n}\n\nexport * from \"./backups\";\nexport * from \"../services/cache/application\";\nexport * from \"./deploys\";\nexport * from \"./files\";\nexport * from \"./network\";\n","export class SquareCloudAPIError extends TypeError {\n\tconstructor(\n\t\tcode: string,\n\t\tmessage?: string,\n\t\toptions?: { stack?: string; cause?: unknown },\n\t) {\n\t\tsuper(code);\n\n\t\tthis.name = \"SquareCloudAPIError\";\n\n\t\tthis.message =\n\t\t\t(code\n\t\t\t\t?.replaceAll(\"_\", \" \")\n\t\t\t\t.toLowerCase()\n\t\t\t\t.replace(/(^|\\s)\\S/g, (L) => L.toUpperCase()) || \"UNKNOWN_CODE\") +\n\t\t\t(message ? `: ${message}` : \"\");\n\n\t\tif (options?.stack) {\n\t\t\tthis.stack = options.stack;\n\t\t}\n\n\t\tif (options?.cause) {\n\t\t\tthis.cause = options.cause;\n\t\t}\n\t}\n}\n","import type { LiteralAssertionProps } from \"@/types/assertions\";\nimport { SquareCloudAPIError } from \"../structures\";\n\nexport function assertLiteral({\n\tschema,\n\tvalue,\n\texpect,\n\tcode,\n}: LiteralAssertionProps) {\n\ttry {\n\t\tschema.parse(value);\n\t} catch {\n\t\tthrow new SquareCloudAPIError(\n\t\t\tcode ? `INVALID_${code}` : \"VALIDATION_ERROR\",\n\t\t\t`Expect ${expect}, got ${typeof value}`,\n\t\t);\n\t}\n}\n","import { assertString } from \"@/assertions/literal\";\nimport { Routes } from \"@/lib/routes\";\nimport type { WebsiteApplication } from \"@/structures\";\n\nexport class NetworkModule {\n\tconstructor(public readonly application: WebsiteApplication) {}\n\n\t/**\n\t * Integrates your website with a custom domain\n\t * - Requires [Senior plan](https://squarecloud.app/plans) or higher\n\t *\n\t * @param custom - The custom domain you want to use (e.g. yoursite.com)\n\t */\n\tasync setCustomDomain(custom: string) {\n\t\tassertString(custom, \"CUSTOM_DOMAIN\");\n\t\tconst data = await this.application.client.api.request(\n\t\t\tRoutes.apps.network.custom(this.application.id),\n\t\t\t{ method: \"POST\", body: { custom } },\n\t\t);\n\n\t\treturn data.status === \"success\";\n\t}\n\n\t/**\n\t * Gets analytics for a custom domain\n\t * - Requires [Senior plan](https://squarecloud.app/plans) or higher\n\t * - Requires the application to have an integrated custom domain\n\t */\n\tasync analytics() {\n\t\tconst data = await this.application.client.api.request(\n\t\t\tRoutes.apps.network.analytics(this.application.id),\n\t\t);\n\n\t\treturn data?.response;\n\t}\n\n\t/**\n\t * Get the DNS records for your custom domain.\n\t */\n\tasync dns() {\n\t\tconst data = await this.application.client.api.request(\n\t\t\tRoutes.apps.network.dns(this.application.id),\n\t\t);\n\n\t\treturn data?.response;\n\t}\n}\n"],"mappings":";AAAA,YAAY,OAAO;;;ACInB,OAAOA,eAAc;;;ACDd,IAAM,QAAQ,CAAwB,UAC5C;AAMM,IAAM,SAAS;AAAA,EACrB,MAAM,MAAM;AACX,WAAO,MAAc,cAAc;AAAA,EACpC;AAAA,EACA,SAAS;AAAA,IACR,QAAQ,MAAM;AACb,aAAO,MAAwB,oBAAoB;AAAA,IACpD;AAAA,EACD;AAAA,EACA,MAAM;AAAA,IACL,QAAQ,MAAM;AACb,aAAO,MAAqB,UAAU;AAAA,IACvC;AAAA,IACA,WAAW,MAAM;AAChB,aAAO,MAAyB,iBAAiB;AAAA,IAClD;AAAA,IACA,MAAM,CAAC,UAAkB;AACxB,aAAO,MAAmB,YAAY,KAAK,EAAE;AAAA,IAC9C;AAAA,IACA,QAAQ,CAAC,UAAkB;AAC1B,aAAO,MAAqB,YAAY,KAAK,SAAS;AAAA,IACvD;AAAA,IACA,MAAM,CAAC,UAAkB;AACxB,aAAO,MAAmB,YAAY,KAAK,OAAO;AAAA,IACnD;AAAA,IACA,QAAQ,CAAC,UAAkB;AAC1B,aAAO,MAAqB,YAAY,KAAK,EAAE;AAAA,IAChD;AAAA,IACA,QAAQ,CAAC,UAAkB;AAC1B,aAAO,MAAqB,YAAY,KAAK,SAAS;AAAA,IACvD;AAAA,IACA,SAAS,CAAC,UAAkB;AAC3B,aAAO,MAAsB,YAAY,KAAK,UAAU;AAAA,IACzD;AAAA,IACA,gBAAgB,CAAC,UAAkB;AAClC,aAAO,MAA8B,YAAY,KAAK,UAAU;AAAA,IACjE;AAAA,IACA,OAAO,CAAC,UAAkB;AACzB,aAAO,MAAoB,YAAY,KAAK,QAAQ;AAAA,IACrD;AAAA,IACA,SAAS,CAAC,UAAkB;AAC3B,aAAO,MAAsB,YAAY,KAAK,UAAU;AAAA,IACzD;AAAA,IACA,MAAM,CAAC,UAAkB;AACxB,aAAO,MAAmB,YAAY,KAAK,OAAO;AAAA,IACnD;AAAA,IACA,OAAO;AAAA,MACN,MAAM,CAAC,UAAkB;AACxB,eAAO,MAAyB,YAAY,KAAK,gBAAgB;AAAA,MAClE;AAAA,MACA,MAAM,CAAC,UAAkB;AACxB,eAAO,MAAyB,YAAY,KAAK,QAAQ;AAAA,MAC1D;AAAA,MACA,QAAQ,CAAC,UAAkB;AAC1B,eAAO,MAA2B,YAAY,KAAK,QAAQ;AAAA,MAC5D;AAAA,MACA,MAAM,CAAC,UAAkB;AACxB,eAAO,MAAyB,YAAY,KAAK,QAAQ;AAAA,MAC1D;AAAA,MACA,QAAQ,CAAC,UAAkB;AAC1B,eAAO,MAA2B,YAAY,KAAK,QAAQ;AAAA,MAC5D;AAAA,IACD;AAAA,IACA,aAAa;AAAA,MACZ,MAAM,CAAC,UAAkB;AACxB,eAAO,MAA+B,YAAY,KAAK,cAAc;AAAA,MACtE;AAAA,MACA,SAAS,CAAC,UAAkB;AAC3B,eAAO;AAAA,UACN,YAAY,KAAK;AAAA,QAClB;AAAA,MACD;AAAA,MACA,SAAS,CAAC,UAAkB;AAC3B,eAAO;AAAA,UACN,YAAY,KAAK;AAAA,QAClB;AAAA,MACD;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR,KAAK,CAAC,UAAkB;AACvB,eAAO,MAA0B,YAAY,KAAK,cAAc;AAAA,MACjE;AAAA,MACA,QAAQ,CAAC,UAAkB;AAC1B,eAAO,MAA6B,YAAY,KAAK,iBAAiB;AAAA,MACvE;AAAA,MACA,WAAW,CAAC,UAAkB;AAC7B,eAAO;AAAA,UACN,YAAY,KAAK;AAAA,QAClB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;;;ACrGA,OAAO,cAAc;;;ACDd,IAAM,sBAAN,cAAkC,UAAU;AAAA,EAClD,YACC,MACA,SACA,SACC;AACD,UAAM,IAAI;AAEV,SAAK,OAAO;AAEZ,SAAK,WACH,MACE,WAAW,KAAK,GAAG,EACpB,YAAY,EACZ,QAAQ,aAAa,CAAC,MAAM,EAAE,YAAY,CAAC,KAAK,mBACjD,UAAU,KAAK,OAAO,KAAK;AAE7B,QAAI,SAAS,OAAO;AACnB,WAAK,QAAQ,QAAQ;AAAA,IACtB;AAEA,QAAI,SAAS,OAAO;AACnB,WAAK,QAAQ,QAAQ;AAAA,IACtB;AAAA,EACD;AACD;;;ACtBO,SAAS,cAAc;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAA0B;AACzB,MAAI;AACH,WAAO,MAAM,KAAK;AAAA,EACnB,QAAQ;AACP,UAAM,IAAI;AAAA,MACT,OAAO,WAAW,IAAI,KAAK;AAAA,MAC3B,UAAU,MAAM,SAAS,OAAO,KAAK;AAAA,IACtC;AAAA,EACD;AACD;;;ALbA,IAAM,eAAiB,SAAO,OAAO;AAErC,IAAM,gBAAkB,SAAO,QAAQ;AAEvC,IAAM,iBAAmB,SAAO,EAAE,GAAK,aAAW,MAAM,CAAC;AAElD,SAAS,aACf,OACA,MAC0B;AAC1B,gBAAc;AAAA,IACb,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACD,CAAC;AACF;;;AMhBO,IAAM,gBAAN,MAAoB;AAAA,EAC1B,YAA4B,aAAiC;AAAjC;AAAA,EAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ9D,MAAM,gBAAgB,QAAgB;AACrC,iBAAa,QAAQ,eAAe;AACpC,UAAM,OAAO,MAAM,KAAK,YAAY,OAAO,IAAI;AAAA,MAC9C,OAAO,KAAK,QAAQ,OAAO,KAAK,YAAY,EAAE;AAAA,MAC9C,EAAE,QAAQ,QAAQ,MAAM,EAAE,OAAO,EAAE;AAAA,IACpC;AAEA,WAAO,KAAK,WAAW;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAAY;AACjB,UAAM,OAAO,MAAM,KAAK,YAAY,OAAO,IAAI;AAAA,MAC9C,OAAO,KAAK,QAAQ,UAAU,KAAK,YAAY,EAAE;AAAA,IAClD;AAEA,WAAO,MAAM;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM;AACX,UAAM,OAAO,MAAM,KAAK,YAAY,OAAO,IAAI;AAAA,MAC9C,OAAO,KAAK,QAAQ,IAAI,KAAK,YAAY,EAAE;AAAA,IAC5C;AAEA,WAAO,MAAM;AAAA,EACd;AACD;","names":["FormData"]}