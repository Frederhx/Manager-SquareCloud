var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/modules/backups.ts
var backups_exports = {};
__export(backups_exports, {
  BackupsModule: () => BackupsModule
});
module.exports = __toCommonJS(backups_exports);

// src/lib/routes.ts
var Route = (route) => route;
var Routes = {
  user: () => {
    return Route("/v2/users/me");
  },
  service: {
    status: () => {
      return Route("/v2/service/status");
    }
  },
  apps: {
    upload: () => {
      return Route("/v2/apps");
    },
    statusAll: () => {
      return Route("/v2/apps/status");
    },
    info: (appId) => {
      return Route(`/v2/apps/${appId}`);
    },
    status: (appId) => {
      return Route(`/v2/apps/${appId}/status`);
    },
    logs: (appId) => {
      return Route(`/v2/apps/${appId}/logs`);
    },
    delete: (appId) => {
      return Route(`/v2/apps/${appId}`);
    },
    commit: (appId) => {
      return Route(`/v2/apps/${appId}/commit`);
    },
    backups: (appId) => {
      return Route(`/v2/apps/${appId}/backups`);
    },
    generateBackup: (appId) => {
      return Route(`/v2/apps/${appId}/backups`);
    },
    start: (appId) => {
      return Route(`/v2/apps/${appId}/start`);
    },
    restart: (appId) => {
      return Route(`/v2/apps/${appId}/restart`);
    },
    stop: (appId) => {
      return Route(`/v2/apps/${appId}/stop`);
    },
    files: {
      read: (appId) => {
        return Route(`/v2/apps/${appId}/files/content`);
      },
      list: (appId) => {
        return Route(`/v2/apps/${appId}/files`);
      },
      upsert: (appId) => {
        return Route(`/v2/apps/${appId}/files`);
      },
      move: (appId) => {
        return Route(`/v2/apps/${appId}/files`);
      },
      delete: (appId) => {
        return Route(`/v2/apps/${appId}/files`);
      }
    },
    deployments: {
      list: (appId) => {
        return Route(`/v2/apps/${appId}/deployments`);
      },
      current: (appId) => {
        return Route(
          `/v2/apps/${appId}/deployments/current`
        );
      },
      webhook: (appId) => {
        return Route(
          `/v2/apps/${appId}/deploy/webhook`
        );
      }
    },
    network: {
      dns: (appId) => {
        return Route(`/v2/apps/${appId}/network/dns`);
      },
      custom: (appId) => {
        return Route(`/v2/apps/${appId}/network/custom`);
      },
      analytics: (appId) => {
        return Route(
          `/v2/apps/${appId}/network/analytics`
        );
      }
    }
  }
};

// src/structures/application/base.ts
var import_form_data2 = __toESM(require("form-data"));

// src/assertions/literal.ts
var z = __toESM(require("zod"));
var StringSchema = z.coerce.string();
var BooleanSchema = z.coerce.boolean();
var PathLikeSchema = z.string().or(z.instanceof(Buffer));

// src/modules/applications.ts
var import_form_data = __toESM(require("form-data"));

// src/structures/error.ts
var SquareCloudAPIError = class extends TypeError {
  constructor(code, message, options) {
    super(code);
    this.name = "SquareCloudAPIError";
    this.message = (code?.replaceAll("_", " ").toLowerCase().replace(/(^|\s)\S/g, (L) => L.toUpperCase()) || "UNKNOWN_CODE") + (message ? `: ${message}` : "");
    if (options?.stack) {
      this.stack = options.stack;
    }
    if (options?.cause) {
      this.cause = options.cause;
    }
  }
};

// src/structures/backup.ts
var Backup = class {
  /**
   * Represents an application backup (snapshot)
   *
   * @constructor
   * @param application - The application from which you fetched the backups
   * @param data - The data from this backup
   */
  constructor(application, data) {
    this.application = application;
    /** Size of the backup in bytes. */
    __publicField(this, "size");
    /** Date of the last modification of the backup. */
    __publicField(this, "modifiedAt");
    /** Date of the last modification of the backup in millisseconds. */
    __publicField(this, "modifiedTimestamp");
    /** AWS access key for the backup. */
    __publicField(this, "key");
    /** The URL for downloading this backup */
    __publicField(this, "url");
    const { name, size, modified, key } = data;
    const { userId } = application.client.api;
    this.size = size;
    this.modifiedAt = new Date(modified);
    this.modifiedTimestamp = this.modifiedAt.getTime();
    this.key = key;
    this.url = `https://backups.squarecloud.app/${userId}_${name}.zip?${key}`;
  }
  /**
   * Downloads this backup
   * @returns The downloaded backup bufer
   */
  async download() {
    const res = await fetch(this.url).then((res2) => res2.arrayBuffer()).catch(() => void 0);
    if (!res) {
      throw new Error("BACKUP_DOWNLOAD_FAILED");
    }
    return Buffer.from(res);
  }
};

// src/modules/backups.ts
var BackupsModule = class {
  constructor(application) {
    this.application = application;
  }
  /**
   * Gets the list of generated backups (snapshots) for this application
   */
  async list() {
    const data = await this.application.client.api.request(
      Routes.apps.backups(this.application.id)
    );
    const backups = data.response;
    this.application.client.emit(
      "backupsUpdate",
      this.application,
      this.application.cache.backups,
      backups
    );
    this.application.cache.set("backups", backups);
    return backups.map((backup) => new Backup(this.application, backup));
  }
  /**
   * Generates a new backup
   * @returns The generated backup URL and key
   */
  async create() {
    const data = await this.application.client.api.request(
      Routes.apps.generateBackup(this.application.id),
      { method: "POST" }
    );
    return data.response;
  }
  /**
   * Generates a new backup and downloads it
   * @returns The downloaded backup bufer
   */
  async download() {
    const backup = await this.create();
    const res = await fetch(backup.url).then((res2) => res2.arrayBuffer()).catch(() => void 0);
    if (!res) {
      throw new SquareCloudAPIError("BACKUP_DOWNLOAD_FAILED");
    }
    return Buffer.from(res);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BackupsModule
});
//# sourceMappingURL=backups.js.map