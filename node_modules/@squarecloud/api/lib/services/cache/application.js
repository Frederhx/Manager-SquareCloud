var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/services/cache/application.ts
var application_exports = {};
__export(application_exports, {
  ApplicationCacheService: () => ApplicationCacheService
});
module.exports = __toCommonJS(application_exports);

// src/services/cache/base.ts
var BaseCacheService = class {
  constructor() {
    __publicField(this, "cache");
  }
  set(key, value) {
    Reflect.set(this, key, value);
  }
  get(key) {
    return this.cache[key];
  }
  remove(key) {
    Reflect.set(this.cache, key, void 0);
  }
};

// src/services/cache/application.ts
var ApplicationCacheService = class extends BaseCacheService {
  constructor() {
    super(...arguments);
    __publicField(this, "cache", {
      status: void 0,
      backups: void 0,
      logs: void 0
    });
  }
  get status() {
    return this.cache.status;
  }
  get backups() {
    return this.cache.backups;
  }
  get logs() {
    return this.cache.logs;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApplicationCacheService
});
//# sourceMappingURL=application.js.map