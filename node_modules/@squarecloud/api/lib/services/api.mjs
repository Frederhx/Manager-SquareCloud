var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/structures/application/base.ts
import FormData2 from "form-data";

// src/assertions/literal.ts
import * as z from "zod";
var StringSchema = z.coerce.string();
var BooleanSchema = z.coerce.boolean();
var PathLikeSchema = z.string().or(z.instanceof(Buffer));

// src/modules/applications.ts
import FormData from "form-data";

// src/structures/error.ts
var SquareCloudAPIError = class extends TypeError {
  constructor(code, message, options) {
    super(code);
    this.name = "SquareCloudAPIError";
    this.message = (code?.replaceAll("_", " ").toLowerCase().replace(/(^|\s)\S/g, (L) => L.toUpperCase()) || "UNKNOWN_CODE") + (message ? `: ${message}` : "");
    if (options?.stack) {
      this.stack = options.stack;
    }
    if (options?.cause) {
      this.cause = options.cause;
    }
  }
};

// src/services/api.ts
var APIService = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
    __publicField(this, "baseUrl", "https://api.squarecloud.app");
    __publicField(this, "version", "v2");
    __publicField(this, "userId");
    this.userId = apiKey.split("-")[0];
  }
  async request(...[path, options]) {
    const { url, init } = this.parseRequestOptions(path, options);
    const response = await fetch(url, init).catch((err) => {
      throw new SquareCloudAPIError(err.code, err.message);
    });
    if (response.status === 413) {
      throw new SquareCloudAPIError("PAYLOAD_TOO_LARGE", "Payload too large");
    }
    if (response.status === 429) {
      throw new SquareCloudAPIError(
        "RATE_LIMIT_EXCEEDED",
        "Rate limit exceeded"
      );
    }
    if (response.status === 502 || response.status === 504) {
      throw new SquareCloudAPIError("SERVER_UNAVAILABLE", "Server unavailable");
    }
    const data = await response.json().catch(() => {
      throw new SquareCloudAPIError("CANNOT_PARSE_RESPONSE", "Try again later");
    });
    if (!data || data.status === "error" || !response.ok) {
      throw new SquareCloudAPIError(data?.code || "COMMON_ERROR");
    }
    return data;
  }
  parseRequestOptions(path, options) {
    const init = options || {};
    init.method = init.method || "GET";
    init.headers = {
      Accept: "application/json",
      ...init.headers || {},
      Authorization: this.apiKey
    };
    const url = new URL(path, `${this.baseUrl}/${this.version}`);
    if ("query" in init && init.query) {
      const query = new URLSearchParams(init.query);
      url.search = query.toString();
      init.query = void 0;
    }
    if ("body" in init && init.body && !(init.body instanceof Buffer)) {
      init.body = JSON.stringify(init.body);
      init.headers = {
        ...init.headers,
        "Content-Type": "application/json"
      };
    }
    return { url, init };
  }
};
export {
  APIService
};
//# sourceMappingURL=api.mjs.map