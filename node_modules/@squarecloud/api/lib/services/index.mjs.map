{"version":3,"sources":["../../src/structures/application/base.ts","../../src/assertions/literal.ts","../../src/modules/applications.ts","../../src/services/cache/base.ts","../../src/services/cache/application.ts","../../src/structures/error.ts","../../src/services/api.ts","../../src/services/cache/global.ts"],"sourcesContent":["import type {\n\tAPIUserApplication,\n\tApplicationLanguage,\n} from \"@squarecloud/api-types/v2\";\nimport FormData from \"form-data\";\nimport { readFile } from \"fs/promises\";\n\nimport { assertPathLike, assertString } from \"@/assertions/literal\";\nimport type { SquareCloudAPI } from \"@/index\";\nimport { Routes } from \"@/lib/routes\";\nimport { BackupsModule, DeploysModule, FilesModule } from \"@/modules\";\nimport { ApplicationCacheService } from \"@/services\";\nimport { ApplicationStatus } from \"@/structures\";\nimport type { Application } from \"./application\";\n\n/**\n * Represents the base application from the user endpoint\n */\nexport class BaseApplication {\n\t/** The application ID */\n\tpublic readonly id: string;\n\t/** The application display name */\n\tpublic name: string;\n\t/** The application description */\n\tpublic description?: string;\n\t/** The url to manage the application via web */\n\tpublic url: string;\n\t/** The application total ram */\n\tpublic ram: number;\n\t/** The application current cluster */\n\tpublic cluster: string;\n\t/**\n\t * The application programming language\n\t *\n\t * - `javascript`\n\t * - `typescript`\n\t * - `python`\n\t * - `java`\n\t * - `elixir`\n\t * - `rust`\n\t * - `go`\n\t * - `php`\n\t * - `dotnet`\n\t * - `static`\n\t */\n\tpublic language: ApplicationLanguage;\n\n\t/** Cache service for this application */\n\tpublic readonly cache = new ApplicationCacheService();\n\t/** Files module for this application */\n\tpublic readonly files = new FilesModule(this);\n\t/** Backup module for this application */\n\tpublic readonly backups = new BackupsModule(this);\n\t/** Deploys module for this application */\n\tpublic readonly deploys = new DeploysModule(this);\n\n\t/**\n\t * Represents the base application from the user endpoint\n\t *\n\t * @constructor\n\t * @param client - The client for this application\n\t * @param data - The data from this application\n\t */\n\tconstructor(\n\t\tpublic readonly client: SquareCloudAPI,\n\t\tdata: APIUserApplication,\n\t) {\n\t\tconst { id, name, desc, ram, lang, cluster } = data;\n\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.description = desc;\n\t\tthis.ram = ram;\n\t\tthis.language = lang;\n\t\tthis.cluster = cluster;\n\t\tthis.url = `https://squarecloud.app/dashboard/app/${id}`;\n\t}\n\n\t/** @deprecated Use `Application#backups` instead */\n\tget backup() {\n\t\tconsole.warn(\n\t\t\t\"Application#backup is deprecated. Use Application#backups instead.\",\n\t\t);\n\t\treturn this.backups;\n\t}\n\n\t/**\n\t * Fetches this application for full information\n\t */\n\tasync fetch(): Promise<Application> {\n\t\treturn this.client.applications.fetch(this.id);\n\t}\n\n\t/**\n\t * Gets the application current status information\n\t */\n\tasync getStatus(): Promise<ApplicationStatus> {\n\t\tconst data = await this.client.api.request(Routes.apps.status(this.id));\n\t\tconst status = new ApplicationStatus(this.client, data.response, this.id);\n\n\t\tthis.client.emit(\"statusUpdate\", this, this.cache.status, status);\n\t\tthis.cache.set(\"status\", status);\n\n\t\treturn status;\n\t}\n\n\t/**\n\t * Gets the application current logs\n\t */\n\tasync getLogs(): Promise<string> {\n\t\tconst data = await this.client.api.request(Routes.apps.logs(this.id));\n\t\tconst { logs } = data.response;\n\n\t\tthis.client.emit(\"logsUpdate\", this, this.cache.logs, logs);\n\t\tthis.cache.set(\"logs\", logs);\n\n\t\treturn logs;\n\t}\n\n\t/**\n\t * Starts up the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync start(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.start(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Stops the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync stop(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.stop(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Restarts the application\n\t * @returns `boolean` for success or fail\n\t */\n\tasync restart(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.restart(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Deletes your whole application\n\t * - This action is irreversible.\n\t *\n\t * @returns `boolean` for success or fail\n\t */\n\tasync delete(): Promise<boolean> {\n\t\tconst data = await this.client.api.request(Routes.apps.delete(this.id), {\n\t\t\tmethod: \"DELETE\",\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n\n\t/**\n\t * Commit files to your application folder\n\t *\n\t * - This action is irreversible.\n\t *\n\t * - Tip: use this to get an absolute path.\n\t * ```ts\n\t * require('path').join(__dirname, 'fileName')\n\t * ```\n\t * - Tip 2: use a zip file to commit more than one archive\n\t *\n\t * @param file - Buffer or absolute path to the file\n\t * @param fileName - The file name (e.g.: \"index.js\")\n\t * @param restart - Whether the application should be restarted after the commit\n\t * @returns `true` for success or `false` for fail\n\t */\n\tasync commit(file: string | Buffer, fileName?: string): Promise<boolean> {\n\t\tassertPathLike(file, \"COMMIT_DATA\");\n\n\t\tif (fileName) {\n\t\t\tassertString(fileName, \"FILE_NAME\");\n\t\t}\n\n\t\tif (typeof file === \"string\") {\n\t\t\tfile = await readFile(file);\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file, { filename: fileName || \"app.zip\" });\n\n\t\tconst data = await this.client.api.request(Routes.apps.commit(this.id), {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData.getBuffer(),\n\t\t\theaders: formData.getHeaders(),\n\t\t});\n\n\t\treturn data?.status === \"success\";\n\t}\n}\n","import * as z from \"zod\";\n\nimport { assertLiteral } from \"./common\";\n\nconst StringSchema = z.coerce.string();\n\nconst BooleanSchema = z.coerce.boolean();\n\nconst PathLikeSchema = z.string().or(z.instanceof(Buffer));\n\nexport function assertString(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is string {\n\tassertLiteral({\n\t\tschema: StringSchema,\n\t\texpect: \"string\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n\nexport function assertBoolean(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is boolean {\n\tassertLiteral({\n\t\tschema: BooleanSchema,\n\t\texpect: \"boolean\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n\nexport function assertPathLike(\n\tvalue: unknown,\n\tcode?: string,\n): asserts value is string | Buffer {\n\tassertLiteral({\n\t\tschema: PathLikeSchema,\n\t\texpect: \"string or Buffer\",\n\t\tvalue,\n\t\tcode,\n\t});\n}\n","import type { RESTPostAPIApplicationUploadResult } from \"@squarecloud/api-types/v2\";\nimport FormData from \"form-data\";\nimport { readFile } from \"fs/promises\";\n\nimport { assertPathLike, assertString } from \"@/assertions/literal\";\nimport { Routes } from \"@/lib/routes\";\nimport {\n\tApplication,\n\ttype BaseApplication,\n\ttype Collection,\n\tSimpleApplicationStatus,\n\tSquareCloudAPIError,\n\tUser,\n} from \"@/structures\";\nimport type { SquareCloudAPI } from \"..\";\n\nexport class ApplicationsModule {\n\tconstructor(public readonly client: SquareCloudAPI) {}\n\n\t/**\n\t * If the ID is provided, it will return an application that you can manage or get information\n\t * If the ID is not provided, it will return a collection of applications\n\t *\n\t * @param applicationId - The application ID, you must own the application\n\t */\n\tasync get(): Promise<Collection<string, BaseApplication>>;\n\tasync get(applicationId: string): Promise<BaseApplication>;\n\tasync get(\n\t\tapplicationId?: string,\n\t): Promise<BaseApplication | Collection<string, BaseApplication>> {\n\t\tconst { response } = await this.client.api.request(Routes.user());\n\t\tconst user = new User(this.client, response);\n\n\t\tthis.client.emit(\"userUpdate\", this.client.cache.user, user);\n\t\tthis.client.cache.set(\"user\", user);\n\n\t\tif (applicationId) {\n\t\t\tassertString(applicationId, \"APP_ID\");\n\t\t\tconst application = user.applications.get(applicationId);\n\n\t\t\tif (!application) {\n\t\t\t\tthrow new SquareCloudAPIError(\"APP_NOT_FOUND\");\n\t\t\t}\n\n\t\t\treturn application;\n\t\t}\n\n\t\treturn user.applications;\n\t}\n\n\t/**\n\t * Uploads an application\n\t *\n\t * @param file - The zip file path or Buffer\n\t *\n\t * @returns The uploaded application data\n\t */\n\tasync create(\n\t\tfile: string | Buffer,\n\t): Promise<RESTPostAPIApplicationUploadResult> {\n\t\tassertPathLike(file, \"COMMIT_DATA\");\n\n\t\tif (typeof file === \"string\") {\n\t\t\tfile = await readFile(file);\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file, { filename: \"app.zip\" });\n\n\t\tconst data = await this.client.api.request(Routes.apps.upload(), {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: formData.getBuffer(),\n\t\t\theaders: formData.getHeaders(),\n\t\t});\n\n\t\treturn data.response;\n\t}\n\n\t/**\n\t * Gets the summary status for all your applications\n\t */\n\tasync statusAll(): Promise<SimpleApplicationStatus[]> {\n\t\tconst data = await this.client.api.request(Routes.apps.statusAll());\n\n\t\treturn data.response.map(\n\t\t\t(status) => new SimpleApplicationStatus(this.client, status),\n\t\t);\n\t}\n\n\t/**\n\t * Returns an application that you can manage or get information\n\t *\n\t * @param applicationId - The application ID, you must own the application\n\t */\n\tasync fetch(applicationId: string): Promise<Application> {\n\t\tconst { response } = await this.client.api.request(\n\t\t\tRoutes.apps.info(applicationId),\n\t\t);\n\n\t\treturn new Application(this.client, response);\n\t}\n}\n\nexport * from \"./backups\";\nexport * from \"../services/cache/application\";\nexport * from \"./deploys\";\nexport * from \"./files\";\nexport * from \"./network\";\n","export class BaseCacheService<\n\tStruct extends object,\n\tKeys extends keyof Struct = keyof Struct,\n> {\n\tprotected cache: Struct;\n\n\tset<T extends Keys>(key: T, value: Struct[T]) {\n\t\tReflect.set(this, key, value);\n\t}\n\n\tget<T extends Keys>(key: T): Struct[T] {\n\t\treturn this.cache[key];\n\t}\n\n\tremove<T extends Keys>(key: T) {\n\t\tReflect.set(this.cache, key, undefined);\n\t}\n}\n","import type { APIApplicationBackup } from \"@squarecloud/api-types/v2\";\n\nimport type { ApplicationStatus } from \"@/structures\";\nimport { BaseCacheService } from \"./base\";\n\nexport interface ApplicationCache {\n\treadonly status?: ApplicationStatus;\n\treadonly backups?: APIApplicationBackup[];\n\treadonly logs?: string;\n}\n\nexport class ApplicationCacheService extends BaseCacheService<ApplicationCache> {\n\tprotected cache: ApplicationCache = {\n\t\tstatus: undefined,\n\t\tbackups: undefined,\n\t\tlogs: undefined,\n\t};\n\n\tget status() {\n\t\treturn this.cache.status;\n\t}\n\n\tget backups() {\n\t\treturn this.cache.backups;\n\t}\n\n\tget logs() {\n\t\treturn this.cache.logs;\n\t}\n}\n","export class SquareCloudAPIError extends TypeError {\n\tconstructor(\n\t\tcode: string,\n\t\tmessage?: string,\n\t\toptions?: { stack?: string; cause?: unknown },\n\t) {\n\t\tsuper(code);\n\n\t\tthis.name = \"SquareCloudAPIError\";\n\n\t\tthis.message =\n\t\t\t(code\n\t\t\t\t?.replaceAll(\"_\", \" \")\n\t\t\t\t.toLowerCase()\n\t\t\t\t.replace(/(^|\\s)\\S/g, (L) => L.toUpperCase()) || \"UNKNOWN_CODE\") +\n\t\t\t(message ? `: ${message}` : \"\");\n\n\t\tif (options?.stack) {\n\t\t\tthis.stack = options.stack;\n\t\t}\n\n\t\tif (options?.cause) {\n\t\t\tthis.cause = options.cause;\n\t\t}\n\t}\n}\n","import type { APIVersion } from \"@squarecloud/api-types/v2\";\n\nimport { SquareCloudAPIError } from \"@/structures\";\nimport type {\n\tAPIEndpoint,\n\tAPIRequestArgs,\n\tAPIRequestOptions,\n\tAPIResponse,\n} from \"@/types\";\n\nexport class APIService {\n\tpublic readonly baseUrl = \"https://api.squarecloud.app\";\n\tpublic readonly version: APIVersion<1 | 2> = \"v2\";\n\tpublic readonly userId: string;\n\n\tconstructor(protected readonly apiKey: string) {\n\t\tthis.userId = apiKey.split(\"-\")[0];\n\t}\n\n\tasync request<T extends APIEndpoint>(\n\t\t...[path, options]: APIRequestArgs<T>\n\t): Promise<APIResponse<T>> {\n\t\tconst { url, init } = this.parseRequestOptions(path, options);\n\n\t\tconst response = await fetch(url, init).catch((err) => {\n\t\t\tthrow new SquareCloudAPIError(err.code, err.message);\n\t\t});\n\n\t\tif (response.status === 413) {\n\t\t\tthrow new SquareCloudAPIError(\"PAYLOAD_TOO_LARGE\", \"Payload too large\");\n\t\t}\n\n\t\tif (response.status === 429) {\n\t\t\tthrow new SquareCloudAPIError(\n\t\t\t\t\"RATE_LIMIT_EXCEEDED\",\n\t\t\t\t\"Rate limit exceeded\",\n\t\t\t);\n\t\t}\n\n\t\tif (response.status === 502 || response.status === 504) {\n\t\t\tthrow new SquareCloudAPIError(\"SERVER_UNAVAILABLE\", \"Server unavailable\");\n\t\t}\n\n\t\tconst data = await response.json().catch(() => {\n\t\t\tthrow new SquareCloudAPIError(\"CANNOT_PARSE_RESPONSE\", \"Try again later\");\n\t\t});\n\n\t\tif (!data || data.status === \"error\" || !response.ok) {\n\t\t\tthrow new SquareCloudAPIError(data?.code || \"COMMON_ERROR\");\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate parseRequestOptions(\n\t\tpath: string,\n\t\toptions?: APIRequestOptions<APIEndpoint>,\n\t) {\n\t\tconst init: RequestInit = options || {};\n\n\t\tinit.method = init.method || \"GET\";\n\t\tinit.headers = {\n\t\t\tAccept: \"application/json\",\n\t\t\t...(init.headers || {}),\n\t\t\tAuthorization: this.apiKey,\n\t\t};\n\n\t\tconst url = new URL(path, `${this.baseUrl}/${this.version}`);\n\n\t\tif (\"query\" in init && init.query) {\n\t\t\tconst query = new URLSearchParams(init.query as Record<string, string>);\n\t\t\turl.search = query.toString();\n\t\t\tinit.query = undefined;\n\t\t}\n\n\t\tif (\"body\" in init && init.body && !(init.body instanceof Buffer)) {\n\t\t\tinit.body = JSON.stringify(init.body);\n\t\t\tinit.headers = {\n\t\t\t\t...init.headers,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t};\n\t\t}\n\n\t\treturn { url, init };\n\t}\n}\n","import type { User } from \"@/structures\";\nimport { BaseCacheService } from \"./base\";\n\nexport interface GlobalCache {\n\treadonly user?: User;\n}\n\nexport class GlobalCacheService extends BaseCacheService<GlobalCache> {\n\tprotected cache: GlobalCache = {\n\t\tuser: undefined,\n\t};\n\n\tget user() {\n\t\treturn this.cache.user;\n\t}\n}\n"],"mappings":"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","names":["FormData"]}